//
//  Test12.swift
//  SwiftUI Redraw
//
//  Created by anbushmanov on 29.12.2024.
//

import SwiftUI

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç equatable, –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–≥–æ. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–µ–Ω–∏–µ, —á—Ç–æ –µ—Å–ª–∏ –º—ã —É–±–∏—Ä–∞–µ–º static func == (lhs: Test12_1, rhs: Test12_1) –∏–ª–∏ .equatable, —Ç–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.

extension Int {
    var isEven: Bool { return self % 2 == 0 }
}

struct Test12: View {
    
    @State private var number: Int = 1
    
    var body: some View {
        VStack {
            Test12_1(number: number)
                .equatable()
            
            TestButton {
                number = Int.random(in: 1...100)
            }
        }
    }
}

struct Test12_1: View, Equatable {
    
    let number: Int
    
    var body: some View {
        let _ = print("\(number.isEven ? "‚úÖ" : "üõë")")
        
        if number.isEven {
            EvenView()
        } else {
            OddView()
        }
    }
    
    static func == (lhs: Test12_1, rhs: Test12_1) -> Bool {
        return lhs.number.isEven == rhs.number.isEven
    }
}

struct EvenView: View {
    var body: some View {
        RoundedRectangle(cornerRadius: 10.0)
            .fill(.green)
            .frame(width: 200.0, height: 200.0)
            .overlay {
                Text("–ß—ë—Ç")
                    .font(.system(size: 40.0))
            }
    }
}

struct OddView: View {
    var body: some View {
        RoundedRectangle(cornerRadius: 10.0)
            .fill(.yellow)
            .frame(width: 200.0, height: 200.0)
            .overlay {
                Text("–ù–µ—á–µ—Ç")
                    .font(.system(size: 40.0))
            }
    }
}

#Preview {
    Test12()
}
